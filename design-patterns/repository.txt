The Repository Pattern
=======================

https://stackoverflow.com/questions/11985736/repository-pattern-step-by-step-explanation

It allows all of your code to use objects without having to know how the objects are persisted. All of the 
knowledge of persistence, including mapping from tables to objects, is safely contained in the repository.

Very often, you will find SQL queries scattered in the codebase and when you come to add a column to a table 
you have to search code files to try and find usages of a table. The impact of the change is far-reaching.

With the repository pattern, you would only need to change one object and one repository. The impact is very small.

Perhaps it would help to think about why you would use the repository pattern. Here are some reasons:

    - You have a single place to make changes to your data access
    - You have a single place responsible for a set of tables (usually)
    - It is easy to replace a repository with a fake implementation for testing - so you don't need to have 
    a database available to your unit tests

There are other benefits too, for example, if you were using MySQL and wanted to switch to SQL Server - but I have 
never actually seen this in practice!

