 - Scope is the set of variables, objects, and functions you have access to.

LOCAL JAVASCRIPT VARIABLES
=============================
 - Variables declared within a JavaScript function, become LOCAL to the function.
 - Local variables have local scope: the can only be accessed within the function.
 - Since local variables are only recognized inside their functions, variables with the same 
   name can be used in different functions.

GLOVAL JAVASCRIPT VARIABLES
=============================
 - A variable declared outside a function, becomes GLOBAL.
 - A global variable has global scope: All scripts and functions on a web page can access it. 
 - If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.

THE LIFETIME OF JAVASCRIPT VARIABLES
===================================== 
 - The lifetime of a JavaScript variable starts when it is declared.
 - Local variables are deleted when the function is completed.
 - Global variables are deleted when you close the page.

GLOBAL VARIABLES IN HTML
=========================
 - With JavaScript, the global scope is the complete JavaScript environment.
 - In HTML, the global scope is the window object: All global variables belong to the window object.

BLOCK LEVEL SCOPE
==================
 - Currently, JavaScript, unlike many other languages, does not support block level scoping. 
 - This means that declaring a variable inside of a block structure like a for loop, does not restrict that variable to the loop. 
 - Instead, the variable will be accessible from the entire function.
 - ECMAScript 6 will support block level scopes via the let keyword.
