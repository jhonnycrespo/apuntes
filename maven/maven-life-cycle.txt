BUILD LIFECYCLE
================

Maven is based around the central concept of a build lifecycle. What this means is that the process for building and distributing a particular artifact (project) is clearly defined.

A Build Lifecycle is a well defined sequence of phases which define the order in which the goals are to be executed.

There are three built-in build lifecycles: default, clean and site. The "default" lifecycle handles your project deployment, the "clean" lifecycle handles project cleaning, while the "site" lifecycle handles the creation of your project's site documentation.

A Build Lifecycle is Made up of Phases
=======================================

Each of these build lifecycles is defined by a different list of build phases, wherein a build phase represents a stage in the lifecycle.

    validate
        - validate the project is correct and all necessary information is available

    compile
        - compile the source code

    test
        - test the compiled source code using a unit testing framework

    package
        - package the compiled code and package it in it's distributable format. for example jar

    integration-test
        - deploy the package into an environment where the integration tests can be run

    verify
        - run any checks to verify the package is valid and meets quality criteria

    install
        - install the package into the local repository for use as a dependecy in other projects locally
        - maven creates the folder "<user>/.m2" as a local repository 

    deploy
        - copies the final package to the remote repository for sharing


plugin goals can be attached to each lifecycle phase
maven executes the goals attached to each phase
each phase has zero or more goals bound to it
    - when you run mvn install, multiple goals are executed
    - in the package phase, it executes the JAR goal


A Build Phase is Made up of Plugin Goals
=========================================

However, even though a build phase is responsible for a specific step in the build lifecycle, the manner in which it carries out those responsibilities may vary. And this is done by declaring the plugin goals bound to those build phases.

A plugin goal represents a specific task (finer than a build phase) which contributes to the building and managing of a project. It may be bound to zero or more build phases. A goal not bound to any build phase could be executed outside of the build lifecycle by direct invocation. The order of execution depends on the order in which the goal(s) and the build phase(s) are invoked. For example, consider the command below. The "clean" and "package" arguments are build phases, while the "dependency:copy-dependencies" is a goal (of a plugin).