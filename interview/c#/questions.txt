1. What is an object?

According to MSDN, "a class or struct definition is like a blueprint that specifies
what the type can do. An object is basically a block of memory that has been allocated
and configured according to the blueprint".

2. What is Boxing and Unboxing?

Boxing and Unboxing both are used for type conversion but have some difference:

Boxing:

Boxing is the process of converting a value type data type to the object or to any interface
data type which is implemented by this value type. When the CLR boxes a value means when CLR
is converting a value type to Object Type, it wraps the value inside a System.Object and stores
it on the heap area in application domain.

int i = 111;
object o = i; // implicit boxing

Unboxing: 

Unboxing is also a process which is used to extract the value type from the object or any
implemented interface type. Boxing may be done implicitly, but unboxing have to be explicit by code.

object o = 111;
int i = (int)o; // explicit boxing

The concept of boxing and unboxing underlines the C# unified view of the type system in
which a value of any type can be treated as an object.

3. Difference between class and struct?

Class and struct both are the user defined data type but have some major difference:

Struct

    The struct is value type in C# and it inherits from System.Value Type.
    Struct is usually used for smaller amounts of data.
    Struct can’t be inherited to other type.
    A structure can't be abstract.
    No need to create object by new keyword.
    Do not have permission to create any default constructor.

Class

    The class is reference type in C# and it inherits from the System.Object Type.
    Classes are usually used for large amounts of data.
    Classes can be inherited to other class.
    A class can be abstract type.
    We can’t use an object of a class with using new keyword.
    We can create a default constructor.

4. What is the difference between interface and abstract class?

    - A class can implement any number of interfaces but a subclass can at
      most use only one abstract class.

    - An abstract class can have non-abstract methods (concrete methods) while
      in case of interface all the methods has to be abstract.

    - An abstract class can declare or use any variables while an interface is not
      allowed to do so.

    - In an abstract class all data member or functions are private by default while
      in interface all are public, we can’t change them manually.

    - In an abstract class we need to use abstract keyword to declare abstract methods
      while in an interface we don’t need to use that.

    - An abstract class can’t be used for multiple inheritance while interface can be
      used as multiple inheritance.

    - An abstract class use constructor while in an interface we don’t have any type
      of constructor.

5. What is an Enum?

An enum is a value type with a set of related named constants often referred to as
an enumerator list.

6. What is the difference between continue and break?

Using break statement, you can 'jump out of a loop' whereas by using continue
statement, you can 'jump over one iteration' and then resume your loop execution.

7. What is the difference between constant and read only in c#?

Constant is known as “const” keyword in C# which is also known immutable values which are
known at compile time and do not change their values at run time like in any function or
constructor for the life of application till the application is running.

Readonly is known as “readonly” keyword in C# which is also known immutable values and are
known at compile and run time and do not change their values at run time like in any function
for the life of application till the application is running. You can assay their value by
constructor when we call constructor with “new” keyword.

8. What is the difference between ref and out keywords?

9. Can "this" be used within a static method?

We can't use this in static method because keyword 'this' returns a reference to the current
instance of the class containing it. Static methods (or any static member) do not belong to a
particular instance.

They exist without creating an instance of the class and call with the name of a class not
by instance so we can’t use this keyword in the body of static Methods, but in case of Extension
Methods we can use it the functions parameters.

The "this" keyword is a special type of reference variable that is implicitly defined within
each constructor and non-static method as a first parameter of the type class in which it is defined.

10. What is a property?

Properties are members that provide a flexible mechanism to read, write or compute the values
of private fields, in other words by the property we can access private fields. In other words
we can say that a property is a return type function/method with one parameter or without a
parameter. These are always public data members. It uses methods to access and assign values
to private fields called accessors.

11. What are accessors?

The get and set portions or blocks of a property are called accessors. These are useful to
restrict the accessibility of a property.

13. What is an extension method?

Extension methods enable you to add methods to existing types without creating a new derived
type, recompiling, or otherwise modifying the original type. An extension method is a special
kind of static method, but they are called as if they were instance methods on the extended type.

An extension method is a static method of a static class, where the "this" modifier is applied
to the first parameter. The type of the first parameter will be the type that is extended.

14. What is the difference between dispose and finalize methods?

finalizer and dispose both are used to free unmanaged resources but have some
differences:

Finalize:

  - free unmanaged resources those are not in use like files, database connections
    held by an object before that object is destroyed.

  - In the Internal process it is called by Garbage Collector and can’t called manual
    by user code or any service.

Dispose:

  - to free unmanaged resources those are not in use like files, database connections
    in Application domain at any time.

  - Dispose explicitly it is called by manual user code.

14. Difference between String and StringBuilder?

String is an immutable object. When we have to do some operations to change string
simply it will dispose the old value of string object and it will create new instance
in memory for hold the new value.

StringBuilder is mutable object which also hold a string value.
StringBuilder is faster.

15. What are delegates?

C# delegates are same as pointers to functions, in C or C++. A delegate Object is a
reference type variable that use to holds the reference to a method.

The reference can be changed at runtime which is hold by an object of delegate, a delegate
object can hold many functions reference which is also known as Invocation List that refers
functions in a sequence FIFO, we can new functions ref in this list at run time by += operator
and can remove by -= operator. 

Delegates are especially used for implementing events and the call-back methods.

16. What is sealed class?

Sealed classes are used to restrict the inheritance feature of object oriented
programming. Once a class is defined as a sealed class, the class cannot be inherited. 

If you have ever noticed, structs are sealed. You cannot derive a class from a struct.

17. What are partial classes?

A partial class is only use to splits the definition of a class in two or more classes
in a same source code file or more than one source files. You can create a class definition
in multiple files but it will be compiled as one class at run time and also when you’ll
create an instance of this class so you can access all the methods from all source file
with a same object.

18. What is IEnumerable?

IEnumerable is the parent interface for all non-generic collections in System.Collections
namespace like ArrayList, HastTable etc. that can be enumerated.

19. What is the difference between late binding and early binding?

Early Binding and Late Binding concepts belongs to polymorphism. Polymorphism is an ability
to take more than one form of a function means with a same name we can write multiple
functions code in a same class or any derived class.

Polymorphism we have 2 different types to achieve that:

    - Compile Time also known as Early Binding or Overloading.
    - Run Time also known as Late Binding or Overriding.

20. Difference between IEnumerable and IQueryable

* What happens if the inherited interfaces have conflicting method names?

http://www.c-sharpcorner.com/UploadFile/8ef97c/C-Sharp-net-interview-questions-and-answers/

* What is the Constructor Chaining in C#?

* What are the Arrays in C#.Net?

* Can Multiple Catch Blocks executed in c#?

* What is Singleton Design Patterns and How to implement in C#?

* Difference between Throw Exception and Throw Clause. 

* What is multicast delegate in c#?

* Difference between Equality Operator (==) and Equals() Method in C#.

* Difference between is and as operator in C#.

* How to use Nullable<> Types in .Net?

* What is an Object Pool in .Net?

* What are generics in c#.net?

* Describe the accessibility modifiers in c#.Net.

* What is Virtual Method in C#?

* What are the Difference between Array and ArrayList in C#.Net?

* What you understand by Value types and Reference types in C#.Net?

* What is Serialization?

* What is jagged array in C#.Net?

* What is Multithreading with .NET?

* Explain Anonymous types in C#?

This is being added in C# 3.0 version. This feature enables us to create an
object at compile time. Below is the sample code for the same –

Var myTestCategory = new { CategoryId = 1, CategoryName = “Category1”}


* Explain Hashtable in C#?

It is used to store the key/value pairs based on hash code of the key. Key will be
used to access the element in the collection.

* What is LINQ in C#?

* What is Reflection in C#.Net?

* Why to use "using" in C#?

“Using” statement calls – “dispose” method internally, whenever any exception occurred
in any method call and in “Using” statement objects are read only and cannot be
reassignable or modifiable.

* Explain namespaces in C#?

Namespaces are containers for the classes. We will use namespaces for grouping the
related classes in C#. “Using” keyword can be used for using the namespace in other
namespace.

* Can we have only "try" block without “catch” block in C#?

Yes we can have only try block without catch block but we have to have finally block.

* List out two different types of errors in C#?

    - Compile Time Error
    - Run Time Error

* What is the difference between “out” and “ref” parameters in C#?

“out” parameter can be passed to a method and it need not be initialized
where as “ref” parameter has to be initialized before it is used.

* What are value types in C#?

decimal, int, byte, enum, double, long, float.

* What are reference types in C#?

class, string, interface, object.

* Can we override private virtual method in C#?

No. We can’t override private virtual methods as it is not accessible outside the class.

* Explain access modifier – “protected internal” in C#?

“protected internal” can be accessed in the same assembly and the child
classes can also access these methods.

* In try block if we add return statement whether finally block is executed in C#?

Yes. Finally block will still be executed in presence of return statement in try block.

* Explain circular reference in C#?

This is a situation where in, multiple resources are dependent on
each other and this causes a lock condition and this makes the
resource to be unused.

* List out some of the exceptions in C#?

NullReferenceException, ArgumentNullException, DivideByZeroException
IndexOutOfRangeException, InvalidOperationException, StackOverflowException etc.

* Explain Generics in C#?

Generics in c# is used to make the code reusable and which intern decreases
the code redundancy and increases the performance and type safety. 

* Explain object pool in C#?

Object pool is used to track the objects which are being used in the
code. So object pool reduces the object creation overhead.

* What you mean by delegate in C#?

Delegates are type safe pointers unlike function pointers as inC++. Delegate is
used to represent the reference of the methods of some return type and parameters.

* What are the types of delegates in C#?

Single Delegate, Multicast Delegate, Generic Delegate.

* What are the three types of Generic delegates in C#?

Func, Action, Predicate.

* What are the differences between events and delegates in C#?

Main difference between event and delegate is event will provide one more
of encapsulation over delegates. So when you are using events destination
will listen to it but delegates are naked, which works in subscriber/destination model.

* What are the uses of delegates in C#?

Callback Mechanism, Asynchronous Processing, Abstract and Encapsulate method, Multicasting

* What is Nullable Types in C#?

Variable types does not hold null values so to hold the null values we have
to use nullable types. So nullable types can have values either null or other values as well.

* What is the difference between “as” and “is” operators in C#?

“as” operator is used for casting object to type or class.
“is” operator is used for checking the object with type and this will return a Boolean value.

* Why to use lock statement in C#?

Lock will make sure one thread will not intercept the other thread which is
running the part of code. So lock statement will make the thread wait, block till
the object is being released.

* What you mean by boxing and unboxing in C#?

Boxing – This is the process of converting from value type to reference type.

int myvar = 10;
object myObj = myvar;

UnBoxing – It’s completely opposite to boxing. It’s the process of converting
reference type to value type. For example,

int myvar2 = (int)myObj;

* Explain Copy constructor in C#?

If the constructor contains the same class in the constructor parameter
then it is called as copy constructor.

  public MyClass(MyClass myobj) // Copy Constructor
  {
    prop1 = myobj.prop1;
    prop2 = myobj.prop2;
  }

* Explain Static constructor in C#?

If the constructor is declared as static then it will be invoked only once
for all number of instances of a class. Static constructor will initialize
the static fields of a class.

* What are the collection types can be used in C#?

ArrayList, Stack, Queue, SortedList, HashTable, Bit Array

* What is a class?

A class is the generic definition of what an object is. A Class describes
all the attributes of the object, as well as the methods that implement the behavior
of the member object. In other words, class is a template of an object.

* Can Multiple Inheritance implemented in C# ?

In C#, derived classes can inherit from one base class only. If you want to
inherit from multiple base classes, use interface.

* What is Polymorphism in C# ?

The ability of a programming language to process objects in different ways
depending on their data type or class is known as Polymorphism. There are
two types of polymorphism.

    - Compile time polymorphism. Best example is Overloading
    - Runtime polymorphism. Best example is Overriding

* Explain the use of Virtual Keyword in C# ?

When we want to give permission to a derived class to override a method
in base class, Virtual keyword is used.

* What is overriding in c# ?

To override a base class method which is defined as virtual, Override keyword is used.

* What is Method Hiding in C# ?

If the derived class doesn't want to use methods in the base class, derived
class can implement it's own version of the same method with same signature.

* What is Abstract Class in C#?

If we don't want a class to be instantiated, define the class as abstract. An abstract
class can have abstract and non abstract classes. If a method is defined as abstract,
it must be implemented in derived class.

* What is a Destructor in C# ?

Destructor is a special method that get invoked/called automatically whenever
an object of a given class gets destroyed. Main idea behind using destructor is
to free the memory used by the object.

* Difference between functional requirements and non-functional

A functional requirement describes what a software system should do,
while non-functional requirements place constraints on how the system will do so.

An example of a functional requirement would be:

    - A system must send an email whenever a certain condition is met (e.g. an order
      is placed, a customer signs up, etc).

A related non-functional requirement for the system may be:
    - Emails should be sent with a latency of no greater than 12 hours from such an activity.

The functional requirement is describing the behavior of the system as it relates to
the system's functionality. The non-functional requirement elaborates a performance
characteristic of the system.

Typically non-functional requirements fall into areas such as:

Accessibility, Capacity, Efficiency, Extensibility, Fault tolerance, Privacy,
Portability, Quality, Reliability, Robustness, Scalability, Security, Stability,
Supportability, Testability.
