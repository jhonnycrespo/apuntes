
Un archivo grunt (gruntfile.js) esta compuesto de las siguientes partes:
	- The "wrapper" function
	- Project and task configuration
	- Loading grunt plugin and tasks
	- custom tasks


PROJECT AND TASK CONFIGURATION
===============================
	- Most grunt tasks rely on configuration data defined in an object passed
	  to the grunt.initConfig() method.
	- When a task is run, grunt looks for its configuration under a property of the same name. Multi-tasks can have
	  multiple configurations, defined using arbitrarily named "targets".

   * pkg: we can store the project settings from the package.json file into the pkg property. This allows us to refer
	  to the value of properties within our package.json.

   * Options
	- Inside a task configuration, an options property may be specfied to overide built-in defaults. In addition, each
	  target may have an options property which is speciffic to that target.
   * Files
	- Because most tasks perform file operations, Grunt has pwerful abstractions for declaring on which files
	  tasks should operate. "There are several ways to define src-dest file mappings":.
		- Compact Format
		- Files Object Format
		- Files Array Format
	- All file formats supports "src" and "dest" properties.


   * Globbing Patterns
	- * matches any number of characters, but not /
	- ** matches any number of characters, including /, as long as it's the only thing in a path part.

	- All most people need to know is that foo/*.js will match all files ending with .js in the foo/ subdirectory, 
	  but foo/**/*.js will match all files ending with .js in the foo/ subdirectory and all of its subdirectories.

   * Templates

	- Templates specified using <% %> delimiters will be automatically expanded when tasks read them from the config.
	  Templates are expanded recursively until no more remain.

	- The entire config object is the context in which properties are resolved. Additionally, grunt and its methods 
	  are available inside templates, eg. <%= grunt.template.today('yyyy-mm-dd') %>.

	- <%= prop.subprop %> Expand to the value of prop.subprop in the config, regardless of type. 
	  Templates like this can be used to reference not only string values, but also arrays or other objects.

	- <% %> Execute arbitrary inline JavaScript code. This is useful with control flow or looping.

   * Importing External Data
	- in the firs part project metadata is imported into the grunt config from a package.json file

	- Grunt has grunt.file.readJSON and grunt.file.readYAML methods for importing JSON and YAML data.