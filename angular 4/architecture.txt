Modules
=======
Angular apps are modular and angular has its own modularity system called NgModules.

Every angular app has at least one NgModules class, the "root module", conventionally named "AppModule"

While the root module may be the only module in a small application, most apps have many more modules, each a cohesive block
of code dedicated to an application domain, a workflow, or a closely related set of capabilities.

An NgModule is a class with an @NgModule decorator

    Decorators are functions that modify JavaScript classes. Angular has many decorators that attach metadata to classes so that
    it knows what those classes mean and how they should work.

NgModule is a decorator function that takes a single metadata object whose properties describe the module. The most important
properties are:

    - declarations: The view classes that belong to this modulel. Angular has three kinds of view classes: components, directives and pipes
    - exports: the subset of declarations that should be visible and usable in the component templates of other modules.
    - imports: Other modules whose exported classes are needed by component templates declared in this module.
    - providers: creators of services that this module contributes to the global collection of services; they become accessible in all parts of the app
    - bootstrap: the main application view, called the root component, that hosts all other app views. Only the root module should set this "bootstrap" property


Components
==========

A component controls a patch of screen called the view. For example, the following views are controlled by components:
    - the app root with the navigation links
    - the list of heroes
    - the hero editor

You define a component's application logic (what it does to support the view) inside a class. The class interacts with the view
through an API of properties and methods.

Angular creates, updates, and destroys components as the user moves through the application. Your app can take action at each moment in this
lifecycle through optional "lifecycle hooks", like ngOnInit().

Templates
=========

You define a component's view with its companion template. A template is a form of HTML that tells angular how to render the component.

A template looks like regular HTML, except for a few differences

Metadata
=========

Metadata tells angular how to process a class.

If you look at a the code for a component class, you can see that it's just a class. There is no evidence of a framework, no "angular" at all.

In fact, the component class really is just a class. It's not a component until you tell angular about it. To tell angular that the class is a component,
we need to attach metadata to the class.

In typescript you attach metadata by using a decorator.

The @Component decorator identifies the class immediately below it as a component class.

The @Component decorator takes a required configuration object with the information Angular needs to create and present the component and its view.

Data binding
============

Directives
==========

Services
=========

Dependency Injection
====================


