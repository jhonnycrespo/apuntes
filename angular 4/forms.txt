FORMS
=====
A large category of frontend applications are very form-intensive, especially in the
case of enterprise development. Many of these applications are basically just huge forms,
spanning multiple tabs and dialogs and non-trivial validation business logic.

TEMPLATE-DRIVE FORMS
=====================
Angular provides a mechanism named ngModel, that allows us to build what is now called template-driven forms.
Forms built with this directive can only be tested in an end to end test because this requires the presence
of a DOM, but still, the mechanism is very useful and simple to understand

PROS AND CONS OF TEMPLATE-DRIVEN FORMS
======================================
  - Keeping the template as the source of all form validations is something that can become pretty hard to
    read. As we add more and more validators tags to a field or when we start adding complex cross-field validations
    the readability of the form decreases.

  - The upside of this way of handling forms is its simplicity, and it's probably more than enough to build large range
    of forms.

  - On the downside, the form validation logic cannot be unit tested. The only way of testing this logic is to run an
    "end to end" test with a browser, for example using a headless browser like PhantomJS

  - There is nothing wrong with template-driven forms, but bi-directional binding is a solution that promotes mutability.
    Each form has a state that can be updated by many different interactions and it's up to the developer to manage that state
    and prevent it from getting corrupted. This can get hard to do for very large forms and can introduce a category of
    potential bugs. But this only happens in very large/complex forms. Angular does provide a different alternative for managing
    forms, model-driven or reactive forms.

REACTIVE FORMS
==============

A model driven form looks on the surface pretty much like a template-driven form.
The validation logic must be somewhere in the controller, where it can be unit tested.

In the controller the form is really just a FormControll, which keeps track of the global validity state. The controls themselves
can either be instantiated individually or defined using a simplified array notation using the form builder.

ngModel can still be used with reactive forms. But the form value would be available in two different places: the view model and the
FormGroup, which could potentially lead to some confussion. Due to this reasong mixing ngModel with reactive forms is best avoided.

PROS AND CONS OF REACTIVE FORMS
===============================

  - We can now unit test form validation logic.
  - The FormGroup and FormControl classes provides an API that allows us to build UIs using a completely different programming style
    known as Functional Reactive Programming. The main point of reactive progrmming is that the form controls and the form itself
    now provides an Observable-based API. You can think of observables simply as a collection of values over time.

    This means that both the control and the whole form itself can be viewed as a continuous stream of values, that can be 
    subscribed to and processed using commonly used Functional primitives. map() and filter() are commonly used functional programming
    operators.

    We are not obliged to use FRP (Functional Reactive Programming) techniques with angular model-driven forms. Simply using
    them to make templates cleaner and allow for component unit testing is already a big plus.

    But FRP techniques can help easily implement many use cases that would otherwise be rather hard to implement such as:
      - pre-save the form in the background at each valid state.
      - typical features like undo/redo.
    


WHICH ON TO USE?
================

model-driven and template-driven under the hood are implemented in the same way: there is a FormGroup for the whole
form, and one FormControl instance per each individual control. If by some reason we would need to, we could mix and match
the two ways of building forms. But in general it's better to choose one of the two ways of doing forms, and using it 
consistently throughout the application.

Template-driven forms are maybe for simple form slightly less verbose, but the difference is not significant. Reactive
forms are actually much more powerful and have nearly equivalent readability.

Most likely in a large-scale application, we will end up needing the functionality of reactive driven forms for implementing
more advanced use cases like for example auto-save.